# KSCONF-NO-SORT

[jmespath-command]
syntax = jmespath <jmespath-string> (field=<field>)? (outfield=<field>)? (default=<string>)?
shortdesc = Declaratively specify how to extract elements from a JSON document using JMESPath
description = \
    Extract and pre-process data from a JSON document using the standard JMESPath query syntax. \
    If no input field is specified, then raw event will be assumed. \
    \
    Syntax help and tutorials avaible at jmespath.org
category = streaming
maintainer = lowell@kintyre.co
related = spath

[jsonformat-command]
syntax = jsonformat (indent=<int>)? <jsonformat-order-option>? (errors=<field>)? <jsonformat-input_mode-option>? (<field> (as <field>)?)*
shortdesc = Reformat, validate, and/or reorder a json event or field(s)
description = \
    Format the body of a JSON event or named JSON field(s). \
    Any validation errors are reported to the field specified to the 'errors' field. \p\\
    Splunk shows JSON events with color coding and nested sections can be expanded as needed.  However, in \
    deeply nested or highly repetitive structures opening these manually can slow you down. \
    Another use case is normalizing JSON representations for comparison purposes.
category = streaming, results::formatting
comment1 = Format the body of a JSON event.  (Click the "Show as raw text" in event view to see the formatted event)
example1 = ... | jsonformat
comment2 = Format a JSON string and store redirect the formatted output in a new field
example2 = ... | jsonformat json as json_formatted
comment3 = Validate a JSON field and show all invalid values
example3 = ... | jsonformat myfield errors=myfield_errors | where myfield_errors!="none"
# Only top 3 are shown the UI by default at this time.
comment4 = Format the body of a JSON event and sort keys
example4 = ... | jsonformat order=sort
comment5 = Compare 2 different JSON objects which have a different key order
example5 = ... | jsonformat order=sort a as a_sorted, b as b_sorted | where a_sorted!=b_sorted | table a_sorted b_sorted
comment6 = Convert a Python literal (repr format) to json.  This allows for further processing via 'spath' or 'jmespath'. \
           (WARNING:  This is not officially supported at this time)
example6 = ... | jsonformat input_mode=python pydict as json | spath input=json ...
maintainer = lowell@kintyre.co
related = jmespath
usage = public
tags = json

[jsonformat-order-option]
syntax = order=(undefined|preserve|sort)
description = \
    If order is UNDEFINED, no sorting or preservation of hash order will be kept. Default because JSON says hash key \
    order is irrelevant. \
     If order is PRESERVE then the represenetation order is preserved in the formatted output. \
     If order is SORT then all hash keys are sorted lexicographically.   This gives a more consitent result.
default = "order=undefined"

[jsonformat-input_mode-option]
syntax = input_mode=(json|python)
description = \
    UNDOCUMENTED / UNSUPPORTED FEATURE  (It normally works, but it's not officially supported at this time.) \
    By default, input is expected to be 'JSON'.   However, this command can be used to parse Python representation \
    strings (literals only) which is sometimes provided by the internal logs of TAs for example.  Once converted to \
    json, other JSON specific commands can be used to manipulate the data.
default = "input_mode=json"
