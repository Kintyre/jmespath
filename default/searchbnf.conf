# KSCONF-NO-SORT

[jmespath-command]
syntax = jmespath "<jmespath-string>" (input=<field>)? (output=<field>)? (default=<string>)?
shortdesc = Use a JMESpath query to extract and process elements from a JSON document. \
    Simple extractions are comparable to spath but advanced queries can often reduce a \
    Splunk search by removing the need for additional post-processing search commands.
description = \
    Extract and pre-process data from a JSON document using the standard JMESPath query syntax. \
    If no input field is specified, then raw event will be assumed. \
    \p\\
    In addition to the default functions offered by JMESpath, the following functions were added to \
    simplify common Splunk use cases \i\\
      * items(@):  Return a hash as a set of key,value pairs \i\\
      * to_hash(@):  Create a hash object from a list of key,value pairs (inverse of the items() function) \i\\
      * from_string(@):  Parse a nested JSON string into it's own object. \i\\
      * unroll(@,key,value):  Creates a hash from a list of hashes with key/value pairs.  The names of the key \
        and value fields must be passed to this function \\i\
    \p\\
    Syntax help and tutorials avaible at jmespath.org
category = streaming, fields::extracting, results::grouping, reporting
comment1 = Exract all the URLs from the relatedContent object
example1 = jmespath output=url "relatedContent[].url"
comment2 = Unroll a list of nested objects like {"Name": "ip", "Value": "10.1.1.9"} into a simple object like: {"ip": "10.1.1.9"}
example2 = jmespath output=extprops "config[] | unroll(@,'Name','Value')"
comment3 = Extract nested JSON from 'additionalTagets' contained within an Office 365 Azure AD management event
example3 = jmespath output=additionalTargets "ExtendedProperties[?Name=='additionalTargets'].Value | from_string(@)"

maintainer = lowell@kintyre.co
related = spath
usage = public
tags = json
