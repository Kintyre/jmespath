# KSCONF-NO-SORT

[jmespath-command]
syntax = jmespath "<jmespath-string>" (input=<field>)? (output=<wc-field>)? (default=<string>)?
shortdesc = Use a JMESpath query to extract and process elements from a JSON document. \
    Simple extractions are comparable to spath but advanced queries can often reduce a \
    Splunk search by removing the need for additional post-processing search commands.
description = \
    Extract and pre-process data from a JSON document using the standard JMESPath query syntax. \
    If no input field is specified, then raw event will be assumed. \
    \p\\
    In addition to the default functions offered by JMESpath, the following functions were added to \
    simplify common Splunk use cases \i\\
      * items(@):  Return a hash as a set of key,value pairs \i\\
      * to_hash(@):  Create a hash object from a list of key,value pairs (inverse of the items() function) \i\\
      * from_string(@):  Parse a nested JSON string into it's own object. \i\\
      * unroll(@,key,value):  Creates a hash from a list of hashes with key/value pairs.  The names of the key \
        and value fields must be passed to this function \\i\
    \p\\
    Syntax help and tutorials available at jmespath.org
category = streaming, fields::extracting, results::grouping, reporting
comment1 = Extract all the URLs from the relatedContent object
example1 = jmespath output=url "relatedContent[].url"
comment2 = Unroll a list of nested hashes into a set of fields with a custom prefix. \
    In this example an input like:  \p\ { "config" : [ {"Name": "ip", "Value": "10.1.1.9"}, ...] } \p\\
    extracts a new field: cfg.ip="10.1.1.9"
example2 = jmespath output=cfg.* "config[] | unroll(@,'Name','Value')"
comment3 = Extract nested JSON from 'additionalTagets' contained within an Office 365 Azure AD management event
example3 = jmespath output=additionalTargets "ExtendedProperties[?Name=='additionalTargets'].Value | from_string(@)"
maintainer = lowell@kintyre.co
related = spath
usage = public
tags = json

[jsonformat-command]
syntax = jsonformat (indent=<int>)? <jsonformat-order-option>? (errors=<field>)? <jsonformat-input_mode-option>? <jsonformat-output_mode-option>? (<field> (as <field>)?)*
shortdesc = Reformat, validate, and/or reorder a json event or field(s)
description = \
    Format the body of a JSON event or named JSON field(s). \
    Any validation errors are reported to the field specified to the 'errors' field. \p\\
    Splunk shows JSON events with color coding and nested sections can be expanded as needed.  However, in \
    deeply nested or highly repetitive structures opening these manually can slow you down. \
    Another use case is normalizing JSON representations for comparison purposes.
category = streaming, results::formatting
comment1 = Format the body of a JSON event.  From the Events tab, click "Show as raw text".
example1 = ... | jsonformat
comment2 = Format a JSON string and store redirect the formatted output in a new field
example2 = ... | jsonformat json as json_formatted
comment3 = Validate a JSON field and show all invalid values
example3 = ... | jsonformat myfield errors=myfield_errors | where myfield_errors!="none"
# Only top 3 are shown the UI by default at this time.
comment4 = Format the body of a JSON event and sort keys
example4 = ... | jsonformat order=sort
comment5 = Compare 2 different JSON objects which have a different key order
example5 = ... | jsonformat order=sort a as a_sorted, b as b_sorted | where a_sorted!=b_sorted | table a_sorted b_sorted
comment6 = Convert a Python literal (repr format) to json.  This allows for further processing via 'spath' or 'jmespath'. \
           (WARNING:  This is not officially supported at this time)
example6 = ... | jsonformat input_mode=python pydict as json | spath input=json ...
comment7 = Convert complex JSON object into a SPL run-anywhere snippet (e.g., to post to Splunk Answers)
example7 = ... | jsonformat output_mode=makeresults _raw | table _raw
maintainer = lowell@kintyre.co
related = jmespath
usage = public
tags = json

[jsonformat-order-option]
syntax = order=(undefined|preserve|sort)
description = \
    If order is UNDEFINED, no sorting or preservation of hash order will be kept.  This is a bit faster. \
    If order is PRESERVE then the representation order is preserved in the formatted output.  This is the default because it's what most people want. \
    If order is SORT then all hash keys are sorted lexicographically.   This gives a more consistent result.
default = "order=preserve"

[jsonformat-input_mode-option]
syntax = input_mode=(json|python)
description = \
    UNDOCUMENTED / UNSUPPORTED FEATURE  (It normally works, but it's not officially supported at this time.) \
    By default, input is expected to be 'JSON'.   However, this command can be used to parse Python representation \
    strings (literals only) which is sometimes provided by the internal logs of TAs for example.  Once converted to \
    json, other JSON specific commands can be used to manipulate the data.
default = "input_mode=json"

[jsonformat-output_mode-option]
syntax = input_mode=(json|makeresults)
description = \
    Use 'makeresults' if you'd like to build a run-anywhere JSON parsing example.  \
    This is useful when posting a complex JSON object on Splunk Answers, for example. \
    Otherwise this option has NO valueT and should be avoided.
default = "input_mode=json"
